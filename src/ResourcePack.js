const fs = require("fs")
const path = require("path")
const { decode } = require("punycode")

class ResourcePack {

    constructor(fileName) {
        this.fileName = fileName
        this.mcmeta = {}
        this.mcmeta.pack_format = 10
        this.mcmeta.description = "GUI Pack generated by PvPHub's UI pack generator."
        this.imagesToMove = []
        this.providers = []
        this.blank = {}
        this.blank.char = "ä¸ƒ"
        this.blank.item = "map"
        this.blank.customModelData = 1010
    }

    image(file, resultFile, options) {
        if (options == undefined) throw Error("You must provide an options object")
        if (resultFile == undefined) resultFile = "guis/" + file
        this.imagesToMove.push({ file: file, resultFile: resultFile})
        this.providers.push({ 
            type: "bitmap",
            file: "minecraft:" + resultFile,
            ascent: options.ascent,
            height: options.height,
            chars: options.chars.map((i) => { return escape(unescape(i)) })
         })
    }

    create(location) {
        if (location === undefined) location = "./"
        location += this.fileName
        if (fs.existsSync(location))
            fs.rmSync(location, { recursive: true, force: true })
        // Create top level folder
        fs.mkdirSync(location)
        // Create mcmeta
        fs.writeFileSync(location + "/pack.mcmeta", JSON.stringify({ pack: this.mcmeta }, null, 2))
        fs.mkdirSync(location + "/assets/minecraft/font/", { recursive: true })
        fs.mkdirSync(location + "/assets/minecraft/models/", { recursive: true })
        fs.mkdirSync(location + "/assets/minecraft/textures/", { recursive: true })
        // Copy the pack.png
        if (this.pack_png != undefined)
            fs.copyFileSync(this.pack_png ,location + "/pack.png")
        // Write the blank png
        fs.copyFileSync("./src/assets/pixel.png", location + "/assets/minecraft/textures/blank.png")
        this.providers.push({ 
            type: "bitmap",
            file: "minecraft:blank.png",
            ascent: -2000,
            height: -3,
            chars: [ escape(unescape(this.blank.char)) ]
         })
        // Write the font/default.json file
        fs.writeFileSync(location + "/assets/minecraft/font/default.json", JSON.stringify({ providers: this.providers }, null, 2).replaceAll("%", "\\"))
        this.imagesToMove.forEach((value) => {
            let outPath = path.dirname(location + "/assets/minecraft/textures/" + value.resultFile)
            fs.mkdirSync(outPath, { recursive: true })
            fs.copyFileSync(value.file, location + "/assets/minecraft/textures/" + value.resultFile)
        });
        // Create a directory for item and gui models
        fs.mkdirSync(location + "/assets/minecraft/models/item")
        fs.mkdirSync(location + "/assets/minecraft/models/guis")
        fs.writeFileSync(location + "/assets/minecraft/models/item/" + this.blank.item +".json", JSON.stringify({
            parent: "item/generated",
            textures: {
                layer0: "item/" + this.blank.item
            },
            overrides: [
                {
                    predicate: {
                        custom_model_data: this.blank.customModelData
                    },
                    model: "guis/invisibleitem"
                }
            ]
        }, null, 2))
        fs.copyFileSync("./src/assets/invisibleitem.json", location + "/assets/minecraft/models/guis/invisibleitem.json")
    }

}

module.exports = { ResourcePack }